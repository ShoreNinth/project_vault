# Shamir 分片算法：
# 实现或集成现有的 Shamir 阈值分片库（如 secretsharing）。
# 将私钥通过分片算法拆分为 N 个分片，要求至少 K 个分片恢复（用户自定义阈值）。
# 分片可能需要附加元数据（如分片编号、哈希校验值）。
# 分片恢复逻辑：验证分片有效性后重组私钥。

import hashlib
import secrets
import json

from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives.asymmetric import rsa

class Splits:

    split1=""
    split2=""
    split3=""
    split4=""
    split5=""


import hashlib
import secrets
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives.asymmetric import rsa


def generate_safe_prime(bit_length: int = 2048):
    """生成安全素数（RSA素数生成方法）"""
    return rsa.generate_private_key(
        public_exponent=65537,
        key_size=bit_length,
        backend=default_backend()
    ).private_numbers().p


def split_secret(secret_bytes: bytes, n: int, k: int, p: int):
    """
    完整分片生成（含哈希计算）
    :return: 包含索引、分片值、哈希值、原始长度的分片列表
    """
    if k < 1 or n < k:
        raise ValueError("无效的分片参数")

    s = int.from_bytes(secret_bytes, byteorder='big')
    if s >= p:
        print(len(str(s)), len(str(p)))
        raise ValueError("秘密值超过素数p的范围")

    # 生成分片索引
    indices = list(range(1, n + 1))

    # 生成多项式系数
    coefficients = [s] + [secrets.randbelow(p) for _ in range(k - 1)]

    shares = []
    for x in indices:
        # 计算分片值y = f(x)
        y = 0
        for coeff in reversed(coefficients):
            y = (y * x + coeff) % p

        # 生成分片数据并计算哈希（修复hashes生成）
        share_data = f"{x}:{y}".encode('utf-8')
        share_hash = hashlib.sha256(share_data).hexdigest()  # 计算分片哈希

        shares.append({
            'index': x,
            'share': y,
            'hash': share_hash,  # 存储哈希值
            'original_length': len(secret_bytes)  # 存储原始秘密长度
        })

    return shares


def recover_secret(shares: list, p: int, k: int):
    """
    完整秘密恢复（含动态字节长度计算）
    :return: 恢复的秘密字节数据
    """
    # 验证分片有效性
    valid_shares = []
    for share in shares:
        x = share['index']
        y = share['share']
        data = f"{x}:{y}".encode('utf-8')
        if hashlib.sha256(data).hexdigest() != share['hash']:
            continue  # 跳过无效分片
        valid_shares.append((x, y))

    if len(valid_shares) < k:
        raise ValueError("有效分片数量不足")

    # 动态计算字节长度
    max_secret = p - 1
    byte_length = (max_secret.bit_length() + 7) // 8

    # 拉格朗日插值
    secret = 0
    for i, (xi, yi) in enumerate(valid_shares):
        l = 1
        for j, (xj, _) in enumerate(valid_shares):
            if i == j:
                continue
            l = (l * (-xj)) % p
            l = (l * pow(xi - xj, -1, p)) % p  # 模逆元计算
        secret = (secret + yi * l) % p

    # 转换为字节并截断原始长度
    recovered_bytes = secret.to_bytes(byte_length, 'big')
    original_length = shares[0]['original_length']
    return recovered_bytes[:original_length]


def start_verify():
    # 生成16384位安全素数
    p = generate_safe_prime(16384)

    # 生成测试秘密（1024字节）
    secret = secrets.token_bytes(1024)
    print("secret:",secret)
    # 生成5个分片（阈值3）
    shares = split_secret(secret, n=5, k=3, p=p)
    print("shares:",shares)
    """
    shares: [{'index': 1, 'share': 135533782578944970344051655399981390832257149369870162907664175347036991277227006211492465785720827057239034236955018184687752552192682974585681099916464916993227974957182753326938870459934042936545677168386242816378826034086522019102264139768232512334241066425021962578462952684263708170757460539447268894051064745249213733750495298049722770756746561872860619079797471664972854959176307829545170283478716660008009331891474598148752780085689685921320385599073017112991865734965526922246756626043970530706690898138912232819450774268071511863828114760230570252109672464133176594480042616974589646908861415677354396376727405836070430885565601027936243093393212538844912766284338248498232216159787618082245767757641380190134063978284199935930225308737775629833758321469986590124840172817326815732668776821519601398996743504505364672010033539843241789515711949392078343779708707524760242349520063666615837538223964406061194683130403895880010810191851067271820969900573165816415514176201058571768579208466814220471541643032302026526403781889508756463164573937312834412756038822290156432701421717432468618145759633024523808042600381161049176110156076510407437023207143154834128448060730402801174873264142465824796551033625825454034262315736448406061021206499619042677552993810679352339307243069818830102476978464594767486448230706583138149677612082137734188448425999504435318486840544848191341525029762080322054934626748252665098185747578748175887552181701493723482301671627104837681895889212710777237628633035330966638092932539483402047907687242613988207289829777799309361892994328282391697020753075640951147758854935393479090831319538731940945007064525930223245994401415198879109472965931563224904615359430166827997859958262088888516538981311852518718424653696982561416385610475971236889796064589665654532856920847206679598911309959932700718205756876649912542970641050741455794599543996237087804279279834093698502674760834068683060748852119855008933861269872078735817595319323012385161624868694118952524714221528505838498046570200559906024742871967667633924762102581069482890205863454456417437875160199395214459527273397613443159949949977602708727911216311741473373852949375844475556594210194554008230286521315581153276640496296253757103364796137050200748985967612136266514578934468277184147370437898475458461836828499370526560717310360390344355438491310170958855628527532929986975450002019539813347968611408132989345726960902478755080685127208270408239561709549526779437, 'hash': 'f75e3acc7652914f9e4936e4ef9f113d52c4c1e0d2bc46b3679cceba9e5d69a0', 'original_length': 1024}, {'index': 2, 'share': 274152106943310705082706918692130259943218312275407259590383713150095612038491788088720526977061830086940559029526616970774390331000717405014364513518615492226861468431180106494440925848209368479180867903083693035414919404378833622941048110174021812935431081232721993782507801458763726033791393579003854537864264393532292918032351468339091227186950444175976719977966735198412904983774203573145223312355182383144141197172960727260915966149279920016691326905730652522776155743901711401259328690232903707932392879790380458672933812355481265317022730905950419487433308111259091415551898466730147736354547060557965204585687179119721928387405056316610309247944168860677756578101435150193296089056716828424734153627129991371837016283831430098467000424314070836231928445862754728828135553620382985385834867321921246693165607090575944794905447971291723534066693520988824516817877025452018187853632467408074615947882593384258847273193350338777961393574369922931965290430356742495002993951735453976264145081809499525239339997533031896968066425021969361381500945971833062714044066450058123423148510117743774364549130521702357739659180325649517731482916519156691335078103824691862114713328518424935157392125192575896893695690819459155156887344819447634825880513542576104009004528181423101506601697693749163769737305151145685206894301413521292210979538548539396345705131687609054247230622376418564142009010870565061866063550424873303207397432649279637866070651172718887574879125698222575796636404765147007181909404468683818575144962209350506584069889983208608038859556971825576580334004835579451079280245606732813846697931039420520424179232606884965636570201447463809756824253700384212047930962622081981456961429593836942587084474898940914471443008022037218567621484249772989098955722085701410093295921658906302882951045566481906747332158480210324782724928417557263921092340497110687824049436678104864846295965891600737306555016728617576186089022459483595797556288880681956007675612444406487834685591907942914567643870026185259249971923894953006577929330526309732676251593037721977794749971878803771665330384957825019111090695201615847920650593728736561094231058105720699274088491360401460038969720045750235901324592031285775902030243395181052780215375855814126983030786170775554576472000503887677743768114220545776958578286936525537181317004407884218400278590930389916157467901826146748401899329939872377785727834767330515718559581046995028209749974767404570284692109083115686531, 'hash': 'b916db5122168c849c38717fb22556be9bad15496d3a9e78ae6160fed78941a5', 'original_length': 1024}, {'index': 3, 'share': 574639876236570893255192887735292294372058330630326122306751125359342414671063239049406187315580394630835991053705955026999543400496969915142332360979704240034021705471587468248910756662683820212369392245519516405037347779643300976622123194566448264990076970035986013962270844112440592924701656178650079999573597416811006863570826127932101665953714874380341630316023738366188376707220707777115653980292309515875160183426624946735032171667077240624050548584713026708258451918731300870894923798966303721326951178385179957755213545874761958936243491670204734707805320560623191544810238470648022268697863454813187286642698795668397195994431589642590479351018240713180862769665438704386477149726233531869722506329915792925523537567409282788173345430670419144816477167093578626871899468114555369893772605339823002013458655293291600296270150029478481696462805611975599980212075900903683830502783058427053209132945413556880674133992563122545743464465784805618558601014141527031199633012058818733144492025265177925206044167486065198150192618720290412826841772572991691400163705269762131305848434556319985227829634775831088327548888948924820623787918930354101759833709430493414026544776517809424786888739740455884446092959874889464276104178293213070009768879627006536590356439020996171703850188031599308436364413381808131266800384225969001241029438210362695799260515378131646842733985602306962309558993793004007072959360979675057233559537832034171869840221394810662219833609738482115681784122352839459593594093451083171548264609007303303516032985447291591607868582018484176872654088280431511961860702305258638426949943210225063727555045671923902913081999833381842862776860417915106661107498349893981971004922265378646140842192093549439566955442704542764572925470687715485410421258874784089232128674161791686515627176921786666207048172183676985520815613197629430933557008975487207881971344583711400698675546433253069066930211532657812507530528332726171329852932513786684885764765522554524970044587989700304858484757304998190552401934593771814340025405231348241558242864774261493378337122115734842547066954240570798855814844583765840487259621251278756920410083488478631163117228215571507694763258574105547925937741506346421189459122159713615861728562002207437951009944492725119228822963384044553479944169137330271795986686805570581083609532265078762722447613152216198871240736476978657717182212163262665353431093632945756381765553966870341503412237837508063328847584187039926245, 'hash': '7eea7bffa958eeba88cddf3fa96881654a333321bb5de329768d401d55969491', 'original_length': 1024}, {'index': 4, 'share': 1036997090458725534861509562529467494118777204434626751056766411974777399174941359093549446801276520688925330309493032353363211760681440504969584642299731160414708686078404838590348362903357398136111250195693712925246111159879924080145489392945511868498178732834814023117752080645294308843488248338385945279179063815085355570365919276828754087057039852485955350093968481168299270129515820441456462287290098058201066290652467256571101396639081647743398050636020139669438754259454295331153541952244170570890365793923310730066289974825913592721490397052993515913225709812225476982255062628728213243938810598443020642547762255482096233706645201005876753402615428096354231340976348911077775398168337728417210825865998784851193627829017758005049260327806820555587404485162458284256131916299843969256481990875224867359875888112652331176104139714403516276704048222352404733962305333879757170296971836723551617093412424923926675265528042247183357022866095715331600901651927519425005431357171152842409620038833849420371654152891401930072782362984471910799187053740788720471114955281402180080801195033161101207987272395410715571711726250986957853025163310102638711290023960559489863942404728556270063363107786105787453742840792116381391912816157744711612686304752910340421608726329398562931052714083369264102358303156582105666166479143926265239827311067607632549114577071072213104996930222513385844174978529397157675622058412657927176672063127011777898860892367769047417165123747883457337339041975788134472682699982529025557451872933341792843796973634862938914316904917775110238853244662838574344762123171218424888514891447807109000958758733848752774542459683684322563852221567791562949002573114999226446745837444791938659133109845914463803076285359369156734336613010810050350782220843219274306294322098321805430885314913120957978059351070332682932477811216866413580364646485871015968365267713056695361418021459050693783800345246189392025073369739582735530751200771392922451862778557456496567701856939391123397236883364944632405336602297016329311031096082783160570735917790688029640967314165249630083084868047632553693699721544063420859777032545229296206448292460015269040939159941354618523974825779619944304125969740763089138927132589851446347904354576230133652923442577984960471631823108747811355898602648828942974062028106505658267594893931973977321945557975649806996947031485425714921298648689710676051078388004978711335344879662104694961671916418580887372028134861299498579, 'hash': '437bce690b20d800e8aeee60bcf810c48cc0268b4bb543c625e4087c475af173', 'original_length': 1024}, {'index': 5, 'share': 588508386262798105643849338225393500852119568602555851629178610121131474140623043572743535334592210520899182630504893461698962694338137360574492418967038997097289806827000450286106926514486035377088121970191375550851538274346971748205039758660858324346764317657102365651882002571667135082583226142020074303906097197219752626667894090255937111438270630721695113611306425346908518827898552789806536819589594273561631012802752205425879121801525146863968881925799308897153252310673379145604597467611575386327084230962966463627739133347684629169187114573932527768619969965232065543229519469234480114008605016540278862025096493478091512367661454063321500528098756709550503651752957082373129382547933165668188490185340781400951408953322617882724536302262129943626712624886807587403968336068926779888161336285860044021560639752357102401933974965059304599397901703080556832187379969865633454926762870835460737502007841392040716189557873339794110489844629729880795110751593879644429681958302418200784489138289292587493439399503184998019991269560823533961923621172256406895091443576021115004588355127904072993118852167911731219977975925170031719481029875620279366401177052119782566417177983669562390407795736345172058183241259125196763280115355914868798687921626745614171929638372663701936650569122676854800211922586103509230325016488388598959874178436225188519159681983975400591694319205398028582781010243293753036032908390885464284912367894370546034927015126479027809259498420125988811692470701104650755385764226452046163742195132314513458403766325618662149290684256350701212891225227218525303964351018052683013486706346302710858081601726118648892038636481241197464600785761318814149453061868993462954875209487912398972854197801659683009668698263849639408790200717503876240752172289252920200171981959509823131918883004487913765213974437149692433760091145746382109444020251509742635631884615874237317156428320220062281994909039214556145244787109090870334919407114624735203014015684584340773889143522768852748144649863403229197714727085824622555190908364942908602829752314564758433981746848992751548553027687772182493983516944530116366612149455696049352949370656382937218391269359065584730564466001590172885402510526045328593322300293216807534703059513099100957581509725793483538017948201130138206029411838657598088795154700613273272153690351240606638119081704968885785856687384302892656445465096171801306372789236344044393885448999044391947673480481434552278486758258331451160, 'hash': '10a5c4ae0b5739ce3c0d50ac156ceac8b2f6b5f7d3cbef6cc0b921c468710f15', 'original_length': 1024}]

    
    """
    # 模拟分片恢复（使用前3个分片）
    recovered = recover_secret(shares[:3], p=p, k=3)
    print("recovered:",recovered)
    # 验证结果
    assert secret == recovered, "秘密恢复不一致！"
    print(f"原始秘密哈希：{hashlib.sha256(secret).hexdigest()}")
    print(f"恢复秘密哈希：{hashlib.sha256(recovered).hexdigest()}")
    print("Shamir分片验证完全成功！")